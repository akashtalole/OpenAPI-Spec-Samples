{
  "swagger": "2.0",
  "info": {
    "title": "Vulture 4 API",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://vulture.example:8000/api/v1"
    }
  ],
  "tags": [
    {
      "name": "PKI"
    },
    {
      "name": "ZFS"
    },
    {
      "name": "Node"
    },
    {
      "name": "Workflow"
    },
    {
      "name": "AccessControl"
    },
    {
      "name": "VirtualMachine"
    },
    {
      "name": "Cluster"
    },
    {
      "name": "Config"
    },
    {
      "name": "Darwin"
    },
    {
      "name": "NetworkAddressCards"
    },
    {
      "name": "NetworkAddress"
    },
    {
      "name": "Authentication"
    }
  ],
  "paths": {
    "/darwin/acl/": {
      "get": {
        "tags": [
          "AccessControl"
        ],
        "summary": "List of Access Control",
        "responses": {
          "200": {
            "description": "List of Access Control",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "enabled": {
                        "type": "boolean"
                      },
                      "rules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "criterion": {
                              "type": "string",
                              "enum": [
                                "src",
                                "base",
                                "hdr",
                                "shdr",
                                "http_auth_group",
                                "method",
                                "path",
                                "url",
                                "urlp",
                                "path",
                                "cook",
                                "scook",
                                "rdp_cookie"
                              ]
                            },
                            "criterion_name": {
                              "type": "string"
                            },
                            "converter": {
                              "type": "string",
                              "enum": [
                                "beg",
                                "dir",
                                "dom",
                                "end",
                                "hex",
                                "int",
                                "ip",
                                "len",
                                "reg",
                                "str",
                                "sub",
                                "found"
                              ]
                            },
                            "flags": {
                              "type": "string",
                              "enum": [
                                "-i",
                                "-n"
                              ]
                            },
                            "operator": {
                              "type": "string",
                              "enum": [
                                "eq",
                                "ge",
                                "gt",
                                "le",
                                "lt"
                              ]
                            },
                            "pattern": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "AccessControl"
        ],
        "summary": "Create an Access Control",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "rules": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "criterion": {
                          "type": "string",
                          "enum": [
                            "src",
                            "base",
                            "hdr",
                            "shdr",
                            "http_auth_group",
                            "method",
                            "path",
                            "url",
                            "urlp",
                            "path",
                            "cook",
                            "scook",
                            "rdp_cookie"
                          ]
                        },
                        "criterion_name": {
                          "type": "string"
                        },
                        "converter": {
                          "type": "string",
                          "enum": [
                            "beg",
                            "dir",
                            "dom",
                            "end",
                            "hex",
                            "int",
                            "ip",
                            "len",
                            "reg",
                            "str",
                            "sub",
                            "found"
                          ]
                        },
                        "flags": {
                          "type": "string",
                          "enum": [
                            "-i",
                            "-n"
                          ]
                        },
                        "operator": {
                          "type": "string",
                          "enum": [
                            "eq",
                            "ge",
                            "gt",
                            "le",
                            "lt"
                          ]
                        },
                        "pattern": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "42"
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "get": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "GET"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "put": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "delete": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        }
                      },
                      "required": [
                        "get",
                        "put",
                        "delete"
                      ]
                    }
                  },
                  "required": [
                    "links",
                    "id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/darwin/acl/{object_id}": {
      "get": {
        "tags": [
          "AccessControl"
        ],
        "summary": "Access Control",
        "parameters": [
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "description": "ID of the Access Control object",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Access Control Object",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "enabled": {
                      "type": "boolean"
                    },
                    "rules": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "criterion": {
                            "type": "string",
                            "enum": [
                              "src",
                              "base",
                              "hdr",
                              "shdr",
                              "http_auth_group",
                              "method",
                              "path",
                              "url",
                              "urlp",
                              "path",
                              "cook",
                              "scook",
                              "rdp_cookie"
                            ]
                          },
                          "criterion_name": {
                            "type": "string"
                          },
                          "converter": {
                            "type": "string",
                            "enum": [
                              "beg",
                              "dir",
                              "dom",
                              "end",
                              "hex",
                              "int",
                              "ip",
                              "len",
                              "reg",
                              "str",
                              "sub",
                              "found"
                            ]
                          },
                          "flags": {
                            "type": "string",
                            "enum": [
                              "-i",
                              "-n"
                            ]
                          },
                          "operator": {
                            "type": "string",
                            "enum": [
                              "eq",
                              "ge",
                              "gt",
                              "le",
                              "lt"
                            ]
                          },
                          "pattern": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AccessControl"
        ],
        "summary": "Edit an Access Control",
        "parameters": [
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "description": "ID of the Access Control object",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "rules": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "criterion": {
                          "type": "string",
                          "enum": [
                            "src",
                            "base",
                            "hdr",
                            "shdr",
                            "http_auth_group",
                            "method",
                            "path",
                            "url",
                            "urlp",
                            "path",
                            "cook",
                            "scook",
                            "rdp_cookie"
                          ]
                        },
                        "criterion_name": {
                          "type": "string"
                        },
                        "converter": {
                          "type": "string",
                          "enum": [
                            "beg",
                            "dir",
                            "dom",
                            "end",
                            "hex",
                            "int",
                            "ip",
                            "len",
                            "reg",
                            "str",
                            "sub",
                            "found"
                          ]
                        },
                        "flags": {
                          "type": "string",
                          "enum": [
                            "-i",
                            "-n"
                          ]
                        },
                        "operator": {
                          "type": "string",
                          "enum": [
                            "eq",
                            "ge",
                            "gt",
                            "le",
                            "lt"
                          ]
                        },
                        "pattern": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "42"
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "get": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "GET"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "put": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "delete": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        }
                      },
                      "required": [
                        "get",
                        "put",
                        "delete"
                      ]
                    }
                  },
                  "required": [
                    "links",
                    "id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/darwin/filter/": {
      "get": {
        "tags": [
          "Darwin"
        ],
        "summary": "List filter instances",
        "responses": {
          "200": {
            "description": "The list of all filter instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 42
                              },
                              "status": {
                                "type": "object",
                                "description": "the state of the filter on each node of the cluster",
                                "example": {
                                  "vulture1": "RUNNING",
                                  "vulture2": "DOWN"
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "discriminator": {
                              "propertyName": "filter_type",
                              "mapping": {
                                "conn": "#/components/schemas/DarwinFilterCONN",
                                "content_inspection": "#/components/schemas/DarwinFilterContentInspection",
                                "dgad": "#/components/schemas/DarwinFilterDGAD",
                                "lkup": "#/components/schemas/DarwinFilterLKUP",
                                "vast": "#/components/schemas/DarwinFilterVAST",
                                "vaml": "#/components/schemas/DarwinFilterVAML",
                                "yara": "#/components/schemas/DarwinFilterYARA"
                              }
                            },
                            "properties": {
                              "filter_type": {
                                "type": "integer",
                                "description": "the id of a valid DarwinFilter object",
                                "example": 5
                              },
                              "policy": {
                                "type": "integer",
                                "description": "the id of a valid DarwinPolicy object",
                                "example": 24
                              },
                              "enabled": {
                                "type": "boolean",
                                "example": true,
                                "default": false,
                                "description": "whether the filter is enabled"
                              },
                              "nb_thread": {
                                "type": "integer",
                                "example": 5,
                                "default": 5,
                                "description": "the number of concurrent threads to start with this filter instance"
                              },
                              "log_level": {
                                "type": "string",
                                "enum": [
                                  "DEBUG",
                                  "INFO",
                                  "NOTICE",
                                  "WARNING",
                                  "ERROR",
                                  "CRITICAL"
                                ],
                                "default": "ERROR",
                                "description": "the log level of the filter (application logs)"
                              },
                              "threshold": {
                                "type": "integer",
                                "minimum": 0,
                                "maximum": 100,
                                "default": 80,
                                "description": "the score above which to trigger an alert, this threshold makes sense mainly for filters with a notion of progressive score"
                              },
                              "mmdarwin_enabled": {
                                "type": "boolean",
                                "description": "activates custom calls to darwin from rsyslog, with fields defined in mmdarwin_parameters",
                                "default": false,
                                "example": false
                              },
                              "mmdarwin_parameters": {
                                "type": "array",
                                "description": "a list of custom fields to take in a call to darwin from rsyslog",
                                "example": [
                                  "$!impcap!net_src_ip",
                                  "$.parsed!domain"
                                ],
                                "default": []
                              },
                              "enrichment_tags": {
                                "type": "array",
                                "description": "a list of additional tags to put in enrichment in case of match",
                                "example": [
                                  "command and control",
                                  "T1483"
                                ],
                                "default": []
                              },
                              "weight": {
                                "type": "integer",
                                "minimum": 0,
                                "example": 4.2,
                                "default": 1,
                                "description": "__Currently has no effect__ the weight to take into account when calculating a global certitude"
                              },
                              "cache_size": {
                                "type": "integer",
                                "description": "the number of entries the filter is able to cache for faster scoring",
                                "example": 1337,
                                "default": 0
                              },
                              "output": {
                                "type": "string",
                                "enum": [
                                  "NONE",
                                  "LOG",
                                  "RAW",
                                  "PARSED"
                                ],
                                "default": "NONE",
                                "example": "NONE",
                                "description": "__obsolete__ the type of output to give to the next filter, as defined by the *next_filter* parameter"
                              },
                              "next_filter": {
                                "type": "integer",
                                "description": "__obsolete__ the id of the next filter",
                                "default": null,
                                "example": null
                              },
                              "config": {
                                "type": "object",
                                "description": "The filter's specific parameter(s)"
                              },
                              "buffering": {
                                "properties": {
                                  "interval": {
                                    "type": "integer",
                                    "example": 300,
                                    "minimum": 1,
                                    "description": "the duration of buffering between 2 scans"
                                  },
                                  "required_log_lines": {
                                    "type": "integer",
                                    "example": 10,
                                    "minimum": 0,
                                    "description": "the minimal number of entries to have to start a scan affter the elapsed caching duration"
                                  }
                                }
                              }
                            },
                            "required": [
                              "filter_type",
                              "policy"
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/darwin/filter/{object_id}/": {
      "parameters": [
        {
          "name": "object_id",
          "in": "path",
          "required": true,
          "description": "the id of a filter instance",
          "schema": {
            "type": "integer",
            "minimum": 1
          }
        }
      ],
      "get": {
        "tags": [
          "Darwin"
        ],
        "summary": "Get specific filter instance",
        "responses": {
          "200": {
            "description": "A specific filter instance",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "example": 42
                            },
                            "status": {
                              "type": "object",
                              "description": "the state of the filter on each node of the cluster",
                              "example": {
                                "vulture1": "RUNNING",
                                "vulture2": "DOWN"
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "discriminator": {
                            "propertyName": "filter_type",
                            "mapping": {
                              "conn": "#/components/schemas/DarwinFilterCONN",
                              "content_inspection": "#/components/schemas/DarwinFilterContentInspection",
                              "dgad": "#/components/schemas/DarwinFilterDGAD",
                              "lkup": "#/components/schemas/DarwinFilterLKUP",
                              "vast": "#/components/schemas/DarwinFilterVAST",
                              "vaml": "#/components/schemas/DarwinFilterVAML",
                              "yara": "#/components/schemas/DarwinFilterYARA"
                            }
                          },
                          "properties": {
                            "filter_type": {
                              "type": "integer",
                              "description": "the id of a valid DarwinFilter object",
                              "example": 5
                            },
                            "policy": {
                              "type": "integer",
                              "description": "the id of a valid DarwinPolicy object",
                              "example": 24
                            },
                            "enabled": {
                              "type": "boolean",
                              "example": true,
                              "default": false,
                              "description": "whether the filter is enabled"
                            },
                            "nb_thread": {
                              "type": "integer",
                              "example": 5,
                              "default": 5,
                              "description": "the number of concurrent threads to start with this filter instance"
                            },
                            "log_level": {
                              "type": "string",
                              "enum": [
                                "DEBUG",
                                "INFO",
                                "NOTICE",
                                "WARNING",
                                "ERROR",
                                "CRITICAL"
                              ],
                              "default": "ERROR",
                              "description": "the log level of the filter (application logs)"
                            },
                            "threshold": {
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 100,
                              "default": 80,
                              "description": "the score above which to trigger an alert, this threshold makes sense mainly for filters with a notion of progressive score"
                            },
                            "mmdarwin_enabled": {
                              "type": "boolean",
                              "description": "activates custom calls to darwin from rsyslog, with fields defined in mmdarwin_parameters",
                              "default": false,
                              "example": false
                            },
                            "mmdarwin_parameters": {
                              "type": "array",
                              "description": "a list of custom fields to take in a call to darwin from rsyslog",
                              "example": [
                                "$!impcap!net_src_ip",
                                "$.parsed!domain"
                              ],
                              "default": []
                            },
                            "enrichment_tags": {
                              "type": "array",
                              "description": "a list of additional tags to put in enrichment in case of match",
                              "example": [
                                "command and control",
                                "T1483"
                              ],
                              "default": []
                            },
                            "weight": {
                              "type": "integer",
                              "minimum": 0,
                              "example": 4.2,
                              "default": 1,
                              "description": "__Currently has no effect__ the weight to take into account when calculating a global certitude"
                            },
                            "cache_size": {
                              "type": "integer",
                              "description": "the number of entries the filter is able to cache for faster scoring",
                              "example": 1337,
                              "default": 0
                            },
                            "output": {
                              "type": "string",
                              "enum": [
                                "NONE",
                                "LOG",
                                "RAW",
                                "PARSED"
                              ],
                              "default": "NONE",
                              "example": "NONE",
                              "description": "__obsolete__ the type of output to give to the next filter, as defined by the *next_filter* parameter"
                            },
                            "next_filter": {
                              "type": "integer",
                              "description": "__obsolete__ the id of the next filter",
                              "default": null,
                              "example": null
                            },
                            "config": {
                              "type": "object",
                              "description": "The filter's specific parameter(s)"
                            },
                            "buffering": {
                              "properties": {
                                "interval": {
                                  "type": "integer",
                                  "example": 300,
                                  "minimum": 1,
                                  "description": "the duration of buffering between 2 scans"
                                },
                                "required_log_lines": {
                                  "type": "integer",
                                  "example": 10,
                                  "minimum": 0,
                                  "description": "the minimal number of entries to have to start a scan affter the elapsed caching duration"
                                }
                              }
                            }
                          },
                          "required": [
                            "filter_type",
                            "policy"
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/darwin/filter/types/": {
      "get": {
        "tags": [
          "Darwin"
        ],
        "summary": "List filter types",
        "responses": {
          "200": {
            "description": "The list of all filter types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 1,
                                "description": "the id of the object"
                              },
                              "name": {
                                "type": "string",
                                "example": "unad",
                                "description": "the quadrigram defining the filter"
                              },
                              "longname": {
                                "type": "string",
                                "example": "UNsupervised Anomaly Detection",
                                "description": "a more complete name, mostly detailling the quadrigram"
                              },
                              "description": {
                                "type": "string",
                                "example": "Detects abnormal variations in network traffic, it scans batches of 5 minutes of network data to discover abnormalities",
                                "description": "a complete description of the filter"
                              },
                              "is_internal": {
                                "type": "boolean",
                                "example": false,
                                "description": "whether this filter type is an internal type or not (should be shown in GUI or not)"
                              },
                              "is_launchable": {
                                "type": "boolean",
                                "example": true,
                                "description": "whether the filter can be launched/used on the system"
                              },
                              "can_be_buffered": {
                                "type": "boolean",
                                "example": true,
                                "description": "whether this filter can be used with timed buffering"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/darwin/filter/{filter_type}/{resssource}": {
      "parameters": [
        {
          "name": "filter_type",
          "in": "path",
          "required": true,
          "description": "the name of the filter_type to get available ressources from",
          "schema": {
            "type": "string",
            "enum": [
              "vast",
              "vaml"
            ],
            "example": "vast"
          }
        },
        {
          "name": "ressource",
          "in": "path",
          "required": true,
          "description": "the ressource to get from the filter_type",
          "schema": {
            "type": "string",
            "enum": [
              "model"
            ],
            "example": "model"
          }
        }
      ],
      "get": {
        "tags": [
          "Darwin"
        ],
        "summary": "List available ressources for a specific filter type",
        "responses": {
          "200": {
            "description": "A list of available specific ressources for a specific filter type",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "model-2020_02_11"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/darwin/policy/": {
      "get": {
        "tags": [
          "Darwin"
        ],
        "summary": "List policies",
        "responses": {
          "200": {
            "description": "The list of all policies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "List of policies",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 12
                              },
                              "name": {
                                "type": "string",
                                "example": "Custom Policy",
                                "description": "the friendly name of the policy (should be unique among policies)"
                              },
                              "description": {
                                "type": "string",
                                "example": "This is the description of your policy",
                                "description": "a description of the policy"
                              },
                              "is_internal": {
                                "type": "boolean",
                                "example": false,
                                "default": false,
                                "description": "whether this policy is an internal policy (not shown in GUI, not created by the user)"
                              },
                              "filters": {
                                "type": "array",
                                "description": "the list of filters in the policy",
                                "items": {
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "integer",
                                          "example": 42
                                        },
                                        "status": {
                                          "type": "object",
                                          "description": "the state of the filter on each node of the cluster",
                                          "example": {
                                            "vulture1": "RUNNING",
                                            "vulture2": "DOWN"
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "discriminator": {
                                        "propertyName": "filter_type",
                                        "mapping": {
                                          "conn": "#/components/schemas/DarwinFilterCONN",
                                          "content_inspection": "#/components/schemas/DarwinFilterContentInspection",
                                          "dgad": "#/components/schemas/DarwinFilterDGAD",
                                          "lkup": "#/components/schemas/DarwinFilterLKUP",
                                          "vast": "#/components/schemas/DarwinFilterVAST",
                                          "vaml": "#/components/schemas/DarwinFilterVAML",
                                          "yara": "#/components/schemas/DarwinFilterYARA"
                                        }
                                      },
                                      "properties": {
                                        "filter_type": {
                                          "type": "integer",
                                          "description": "the id of a valid DarwinFilter object",
                                          "example": 5
                                        },
                                        "policy": {
                                          "type": "integer",
                                          "description": "the id of a valid DarwinPolicy object",
                                          "example": 24
                                        },
                                        "enabled": {
                                          "type": "boolean",
                                          "example": true,
                                          "default": false,
                                          "description": "whether the filter is enabled"
                                        },
                                        "nb_thread": {
                                          "type": "integer",
                                          "example": 5,
                                          "default": 5,
                                          "description": "the number of concurrent threads to start with this filter instance"
                                        },
                                        "log_level": {
                                          "type": "string",
                                          "enum": [
                                            "DEBUG",
                                            "INFO",
                                            "NOTICE",
                                            "WARNING",
                                            "ERROR",
                                            "CRITICAL"
                                          ],
                                          "default": "ERROR",
                                          "description": "the log level of the filter (application logs)"
                                        },
                                        "threshold": {
                                          "type": "integer",
                                          "minimum": 0,
                                          "maximum": 100,
                                          "default": 80,
                                          "description": "the score above which to trigger an alert, this threshold makes sense mainly for filters with a notion of progressive score"
                                        },
                                        "mmdarwin_enabled": {
                                          "type": "boolean",
                                          "description": "activates custom calls to darwin from rsyslog, with fields defined in mmdarwin_parameters",
                                          "default": false,
                                          "example": false
                                        },
                                        "mmdarwin_parameters": {
                                          "type": "array",
                                          "description": "a list of custom fields to take in a call to darwin from rsyslog",
                                          "example": [
                                            "$!impcap!net_src_ip",
                                            "$.parsed!domain"
                                          ],
                                          "default": []
                                        },
                                        "enrichment_tags": {
                                          "type": "array",
                                          "description": "a list of additional tags to put in enrichment in case of match",
                                          "example": [
                                            "command and control",
                                            "T1483"
                                          ],
                                          "default": []
                                        },
                                        "weight": {
                                          "type": "integer",
                                          "minimum": 0,
                                          "example": 4.2,
                                          "default": 1,
                                          "description": "__Currently has no effect__ the weight to take into account when calculating a global certitude"
                                        },
                                        "cache_size": {
                                          "type": "integer",
                                          "description": "the number of entries the filter is able to cache for faster scoring",
                                          "example": 1337,
                                          "default": 0
                                        },
                                        "output": {
                                          "type": "string",
                                          "enum": [
                                            "NONE",
                                            "LOG",
                                            "RAW",
                                            "PARSED"
                                          ],
                                          "default": "NONE",
                                          "example": "NONE",
                                          "description": "__obsolete__ the type of output to give to the next filter, as defined by the *next_filter* parameter"
                                        },
                                        "next_filter": {
                                          "type": "integer",
                                          "description": "__obsolete__ the id of the next filter",
                                          "default": null,
                                          "example": null
                                        },
                                        "config": {
                                          "type": "object",
                                          "description": "The filter's specific parameter(s)"
                                        },
                                        "buffering": {
                                          "properties": {
                                            "interval": {
                                              "type": "integer",
                                              "example": 300,
                                              "minimum": 1,
                                              "description": "the duration of buffering between 2 scans"
                                            },
                                            "required_log_lines": {
                                              "type": "integer",
                                              "example": 10,
                                              "minimum": 0,
                                              "description": "the minimal number of entries to have to start a scan affter the elapsed caching duration"
                                            }
                                          }
                                        }
                                      },
                                      "required": [
                                        "filter_type",
                                        "policy"
                                      ]
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Darwin"
        ],
        "summary": "Create policy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Custom Policy"
                  },
                  "description": {
                    "type": "string",
                    "example": "This is the description of your policy"
                  },
                  "is_internal": {
                    "type": "boolean",
                    "example": false,
                    "default": false,
                    "description": "whether this policy is an internal policy (not shown in GUI, not created by the user)"
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "discriminator": {
                        "propertyName": "filter_type",
                        "mapping": {
                          "conn": "#/components/schemas/DarwinFilterCONN",
                          "content_inspection": "#/components/schemas/DarwinFilterContentInspection",
                          "dgad": "#/components/schemas/DarwinFilterDGAD",
                          "lkup": "#/components/schemas/DarwinFilterLKUP",
                          "vast": "#/components/schemas/DarwinFilterVAST",
                          "vaml": "#/components/schemas/DarwinFilterVAML",
                          "yara": "#/components/schemas/DarwinFilterYARA"
                        }
                      },
                      "properties": {
                        "filter_type": {
                          "type": "integer",
                          "description": "the id of a valid DarwinFilter object",
                          "example": 5
                        },
                        "policy": {
                          "type": "integer",
                          "description": "the id of a valid DarwinPolicy object",
                          "example": 24
                        },
                        "enabled": {
                          "type": "boolean",
                          "example": true,
                          "default": false,
                          "description": "whether the filter is enabled"
                        },
                        "nb_thread": {
                          "type": "integer",
                          "example": 5,
                          "default": 5,
                          "description": "the number of concurrent threads to start with this filter instance"
                        },
                        "log_level": {
                          "type": "string",
                          "enum": [
                            "DEBUG",
                            "INFO",
                            "NOTICE",
                            "WARNING",
                            "ERROR",
                            "CRITICAL"
                          ],
                          "default": "ERROR",
                          "description": "the log level of the filter (application logs)"
                        },
                        "threshold": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 100,
                          "default": 80,
                          "description": "the score above which to trigger an alert, this threshold makes sense mainly for filters with a notion of progressive score"
                        },
                        "mmdarwin_enabled": {
                          "type": "boolean",
                          "description": "activates custom calls to darwin from rsyslog, with fields defined in mmdarwin_parameters",
                          "default": false,
                          "example": false
                        },
                        "mmdarwin_parameters": {
                          "type": "array",
                          "description": "a list of custom fields to take in a call to darwin from rsyslog",
                          "example": [
                            "$!impcap!net_src_ip",
                            "$.parsed!domain"
                          ],
                          "default": []
                        },
                        "enrichment_tags": {
                          "type": "array",
                          "description": "a list of additional tags to put in enrichment in case of match",
                          "example": [
                            "command and control",
                            "T1483"
                          ],
                          "default": []
                        },
                        "weight": {
                          "type": "integer",
                          "minimum": 0,
                          "example": 4.2,
                          "default": 1,
                          "description": "__Currently has no effect__ the weight to take into account when calculating a global certitude"
                        },
                        "cache_size": {
                          "type": "integer",
                          "description": "the number of entries the filter is able to cache for faster scoring",
                          "example": 1337,
                          "default": 0
                        },
                        "output": {
                          "type": "string",
                          "enum": [
                            "NONE",
                            "LOG",
                            "RAW",
                            "PARSED"
                          ],
                          "default": "NONE",
                          "example": "NONE",
                          "description": "__obsolete__ the type of output to give to the next filter, as defined by the *next_filter* parameter"
                        },
                        "next_filter": {
                          "type": "integer",
                          "description": "__obsolete__ the id of the next filter",
                          "default": null,
                          "example": null
                        },
                        "config": {
                          "type": "object",
                          "description": "The filter's specific parameter(s)"
                        },
                        "buffering": {
                          "properties": {
                            "interval": {
                              "type": "integer",
                              "example": 300,
                              "minimum": 1,
                              "description": "the duration of buffering between 2 scans"
                            },
                            "required_log_lines": {
                              "type": "integer",
                              "example": 10,
                              "minimum": 0,
                              "description": "the minimal number of entries to have to start a scan affter the elapsed caching duration"
                            }
                          }
                        }
                      },
                      "required": [
                        "filter_type",
                        "policy"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "42"
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "get": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "GET"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "put": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "delete": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        }
                      },
                      "required": [
                        "get",
                        "put",
                        "delete"
                      ]
                    }
                  },
                  "required": [
                    "links",
                    "id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/darwin/policy/{object_id}/": {
      "parameters": [
        {
          "in": "path",
          "name": "object_id",
          "required": true,
          "description": "ID of the policy",
          "schema": {
            "type": "integer",
            "minimum": 1
          }
        }
      ],
      "get": {
        "tags": [
          "Darwin"
        ],
        "summary": "Get Policy",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "example": 12
                            },
                            "name": {
                              "type": "string",
                              "example": "Custom Policy",
                              "description": "the friendly name of the policy (should be unique among policies)"
                            },
                            "description": {
                              "type": "string",
                              "example": "This is the description of your policy",
                              "description": "a description of the policy"
                            },
                            "is_internal": {
                              "type": "boolean",
                              "example": false,
                              "default": false,
                              "description": "whether this policy is an internal policy (not shown in GUI, not created by the user)"
                            },
                            "filters": {
                              "type": "array",
                              "description": "the list of filters in the policy",
                              "items": {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "integer",
                                        "example": 42
                                      },
                                      "status": {
                                        "type": "object",
                                        "description": "the state of the filter on each node of the cluster",
                                        "example": {
                                          "vulture1": "RUNNING",
                                          "vulture2": "DOWN"
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "discriminator": {
                                      "propertyName": "filter_type",
                                      "mapping": {
                                        "conn": "#/components/schemas/DarwinFilterCONN",
                                        "content_inspection": "#/components/schemas/DarwinFilterContentInspection",
                                        "dgad": "#/components/schemas/DarwinFilterDGAD",
                                        "lkup": "#/components/schemas/DarwinFilterLKUP",
                                        "vast": "#/components/schemas/DarwinFilterVAST",
                                        "vaml": "#/components/schemas/DarwinFilterVAML",
                                        "yara": "#/components/schemas/DarwinFilterYARA"
                                      }
                                    },
                                    "properties": {
                                      "filter_type": {
                                        "type": "integer",
                                        "description": "the id of a valid DarwinFilter object",
                                        "example": 5
                                      },
                                      "policy": {
                                        "type": "integer",
                                        "description": "the id of a valid DarwinPolicy object",
                                        "example": 24
                                      },
                                      "enabled": {
                                        "type": "boolean",
                                        "example": true,
                                        "default": false,
                                        "description": "whether the filter is enabled"
                                      },
                                      "nb_thread": {
                                        "type": "integer",
                                        "example": 5,
                                        "default": 5,
                                        "description": "the number of concurrent threads to start with this filter instance"
                                      },
                                      "log_level": {
                                        "type": "string",
                                        "enum": [
                                          "DEBUG",
                                          "INFO",
                                          "NOTICE",
                                          "WARNING",
                                          "ERROR",
                                          "CRITICAL"
                                        ],
                                        "default": "ERROR",
                                        "description": "the log level of the filter (application logs)"
                                      },
                                      "threshold": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "maximum": 100,
                                        "default": 80,
                                        "description": "the score above which to trigger an alert, this threshold makes sense mainly for filters with a notion of progressive score"
                                      },
                                      "mmdarwin_enabled": {
                                        "type": "boolean",
                                        "description": "activates custom calls to darwin from rsyslog, with fields defined in mmdarwin_parameters",
                                        "default": false,
                                        "example": false
                                      },
                                      "mmdarwin_parameters": {
                                        "type": "array",
                                        "description": "a list of custom fields to take in a call to darwin from rsyslog",
                                        "example": [
                                          "$!impcap!net_src_ip",
                                          "$.parsed!domain"
                                        ],
                                        "default": []
                                      },
                                      "enrichment_tags": {
                                        "type": "array",
                                        "description": "a list of additional tags to put in enrichment in case of match",
                                        "example": [
                                          "command and control",
                                          "T1483"
                                        ],
                                        "default": []
                                      },
                                      "weight": {
                                        "type": "integer",
                                        "minimum": 0,
                                        "example": 4.2,
                                        "default": 1,
                                        "description": "__Currently has no effect__ the weight to take into account when calculating a global certitude"
                                      },
                                      "cache_size": {
                                        "type": "integer",
                                        "description": "the number of entries the filter is able to cache for faster scoring",
                                        "example": 1337,
                                        "default": 0
                                      },
                                      "output": {
                                        "type": "string",
                                        "enum": [
                                          "NONE",
                                          "LOG",
                                          "RAW",
                                          "PARSED"
                                        ],
                                        "default": "NONE",
                                        "example": "NONE",
                                        "description": "__obsolete__ the type of output to give to the next filter, as defined by the *next_filter* parameter"
                                      },
                                      "next_filter": {
                                        "type": "integer",
                                        "description": "__obsolete__ the id of the next filter",
                                        "default": null,
                                        "example": null
                                      },
                                      "config": {
                                        "type": "object",
                                        "description": "The filter's specific parameter(s)"
                                      },
                                      "buffering": {
                                        "properties": {
                                          "interval": {
                                            "type": "integer",
                                            "example": 300,
                                            "minimum": 1,
                                            "description": "the duration of buffering between 2 scans"
                                          },
                                          "required_log_lines": {
                                            "type": "integer",
                                            "example": 10,
                                            "minimum": 0,
                                            "description": "the minimal number of entries to have to start a scan affter the elapsed caching duration"
                                          }
                                        }
                                      }
                                    },
                                    "required": [
                                      "filter_type",
                                      "policy"
                                    ]
                                  }
                                ]
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Darwin"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Custom Policy"
                  },
                  "description": {
                    "type": "string",
                    "example": "This is the description of your policy"
                  },
                  "is_internal": {
                    "type": "boolean",
                    "example": false,
                    "default": false,
                    "description": "whether this policy is an internal policy (not shown in GUI, not created by the user)"
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "discriminator": {
                        "propertyName": "filter_type",
                        "mapping": {
                          "conn": "#/components/schemas/DarwinFilterCONN",
                          "content_inspection": "#/components/schemas/DarwinFilterContentInspection",
                          "dgad": "#/components/schemas/DarwinFilterDGAD",
                          "lkup": "#/components/schemas/DarwinFilterLKUP",
                          "vast": "#/components/schemas/DarwinFilterVAST",
                          "vaml": "#/components/schemas/DarwinFilterVAML",
                          "yara": "#/components/schemas/DarwinFilterYARA"
                        }
                      },
                      "properties": {
                        "filter_type": {
                          "type": "integer",
                          "description": "the id of a valid DarwinFilter object",
                          "example": 5
                        },
                        "policy": {
                          "type": "integer",
                          "description": "the id of a valid DarwinPolicy object",
                          "example": 24
                        },
                        "enabled": {
                          "type": "boolean",
                          "example": true,
                          "default": false,
                          "description": "whether the filter is enabled"
                        },
                        "nb_thread": {
                          "type": "integer",
                          "example": 5,
                          "default": 5,
                          "description": "the number of concurrent threads to start with this filter instance"
                        },
                        "log_level": {
                          "type": "string",
                          "enum": [
                            "DEBUG",
                            "INFO",
                            "NOTICE",
                            "WARNING",
                            "ERROR",
                            "CRITICAL"
                          ],
                          "default": "ERROR",
                          "description": "the log level of the filter (application logs)"
                        },
                        "threshold": {
                          "type": "integer",
                          "minimum": 0,
                          "maximum": 100,
                          "default": 80,
                          "description": "the score above which to trigger an alert, this threshold makes sense mainly for filters with a notion of progressive score"
                        },
                        "mmdarwin_enabled": {
                          "type": "boolean",
                          "description": "activates custom calls to darwin from rsyslog, with fields defined in mmdarwin_parameters",
                          "default": false,
                          "example": false
                        },
                        "mmdarwin_parameters": {
                          "type": "array",
                          "description": "a list of custom fields to take in a call to darwin from rsyslog",
                          "example": [
                            "$!impcap!net_src_ip",
                            "$.parsed!domain"
                          ],
                          "default": []
                        },
                        "enrichment_tags": {
                          "type": "array",
                          "description": "a list of additional tags to put in enrichment in case of match",
                          "example": [
                            "command and control",
                            "T1483"
                          ],
                          "default": []
                        },
                        "weight": {
                          "type": "integer",
                          "minimum": 0,
                          "example": 4.2,
                          "default": 1,
                          "description": "__Currently has no effect__ the weight to take into account when calculating a global certitude"
                        },
                        "cache_size": {
                          "type": "integer",
                          "description": "the number of entries the filter is able to cache for faster scoring",
                          "example": 1337,
                          "default": 0
                        },
                        "output": {
                          "type": "string",
                          "enum": [
                            "NONE",
                            "LOG",
                            "RAW",
                            "PARSED"
                          ],
                          "default": "NONE",
                          "example": "NONE",
                          "description": "__obsolete__ the type of output to give to the next filter, as defined by the *next_filter* parameter"
                        },
                        "next_filter": {
                          "type": "integer",
                          "description": "__obsolete__ the id of the next filter",
                          "default": null,
                          "example": null
                        },
                        "config": {
                          "type": "object",
                          "description": "The filter's specific parameter(s)"
                        },
                        "buffering": {
                          "properties": {
                            "interval": {
                              "type": "integer",
                              "example": 300,
                              "minimum": 1,
                              "description": "the duration of buffering between 2 scans"
                            },
                            "required_log_lines": {
                              "type": "integer",
                              "example": 10,
                              "minimum": 0,
                              "description": "the minimal number of entries to have to start a scan affter the elapsed caching duration"
                            }
                          }
                        }
                      },
                      "required": [
                        "filter_type",
                        "policy"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update policy",
        "description": "verb to create or update a specific policy based on its ID",
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "42"
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "get": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "GET"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "put": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "delete": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        }
                      },
                      "required": [
                        "get",
                        "put",
                        "delete"
                      ]
                    }
                  },
                  "required": [
                    "links",
                    "id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Darwin"
        ],
        "summary": "Delete policy",
        "description": "Delete a policy based on its ID",
        "responses": {
          "200": {
            "description": "The command succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "boolean",
                      "enum": [
                        true,
                        false
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/darwin/policy/{object_id}/{action}/": {
      "parameters": [
        {
          "in": "path",
          "name": "object_id",
          "required": true,
          "description": "the id of the policy",
          "schema": {
            "type": "integer",
            "minimum": 1
          }
        },
        {
          "in": "path",
          "name": "action",
          "required": true,
          "description": "the action to execute on this policy (currently none)",
          "schema": {
            "type": "string",
            "enum": [
              ""
            ]
          }
        }
      ],
      "post": {
        "tags": [
          "Darwin"
        ],
        "summary": "Action on policy",
        "responses": {
          "401": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/config/": {
      "get": {
        "tags": [
          "Config"
        ],
        "summary": "Get Cluster configuration",
        "responses": {
          "200": {
            "description": "Get Cluster configuration",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "pf_ssh_restrict": {
                      "type": "string"
                    },
                    "pf_admin_restrict": {
                      "type": "string"
                    },
                    "cluster_api_key": {
                      "type": "string"
                    },
                    "oauth2_header_name": {
                      "type": "string"
                    },
                    "portal_cookie_name": {
                      "type": "string"
                    },
                    "public_token": {
                      "type": "string"
                    },
                    "branch": {
                      "type": "string"
                    },
                    "smtp_server": {
                      "type": "string"
                    },
                    "pf_whitelist": {
                      "type": "string"
                    },
                    "pf_blacklist": {
                      "type": "string"
                    },
                    "ssh_authorized_keys": {
                      "type": "string"
                    },
                    "rsa_encryption_key": {
                      "type": "string"
                    },
                    "logs_ttl": {
                      "type": "integer"
                    },
                    "internal_tenants": {
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "predator_api_key": {
                          "type": "string"
                        },
                        "shodan_apikey": {
                          "type": "string"
                        },
                        "chameleon_apikey": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Config"
        ],
        "summary": "Edit Config",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "pf_ssh_restrict": {
                    "type": "string"
                  },
                  "pf_admin_restrict": {
                    "type": "string"
                  },
                  "cluster_api_key": {
                    "type": "string"
                  },
                  "oauth2_header_name": {
                    "type": "string"
                  },
                  "portal_cookie_name": {
                    "type": "string"
                  },
                  "public_token": {
                    "type": "string"
                  },
                  "branch": {
                    "type": "string"
                  },
                  "smtp_server": {
                    "type": "string"
                  },
                  "pf_whitelist": {
                    "type": "string"
                  },
                  "pf_blacklist": {
                    "type": "string"
                  },
                  "ssh_authorized_keys": {
                    "type": "string"
                  },
                  "rsa_encryption_key": {
                    "type": "string"
                  },
                  "logs_ttl": {
                    "type": "integer"
                  },
                  "internal_tenants": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "predator_api_key": {
                        "type": "string"
                      },
                      "shodan_apikey": {
                        "type": "string"
                      },
                      "chameleon_apikey": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "42"
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "get": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "GET"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "put": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "delete": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        }
                      },
                      "required": [
                        "get",
                        "put",
                        "delete"
                      ]
                    }
                  },
                  "required": [
                    "links",
                    "id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/config/{list_type}/": {
      "post": {
        "tags": [
          "Config"
        ],
        "summary": "Define Packet Filter Whitelist or Blacklist",
        "parameters": [
          {
            "in": "path",
            "name": "list_type",
            "required": true,
            "description": "Whitelist or Blacklist",
            "schema": {
              "type": "string",
              "enum": [
                "whitelist",
                "blacklist"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ip_address": {
                    "type": "string",
                    "example": "192.168.1.254"
                  },
                  "action": {
                    "type": "string",
                    "enum": [
                      "add",
                      "del"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The command succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "boolean",
                      "enum": [
                        true,
                        false
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/node/": {
      "get": {
        "tags": [
          "Node"
        ],
        "summary": "Get all nodes",
        "responses": {
          "200": {
            "description": "This list of all nodes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Node name"
                          },
                          "pf_limit_states": {
                            "type": "integer"
                          },
                          "pf_limit_frags": {
                            "type": "integer"
                          },
                          "pf_limit_src": {
                            "type": "integer"
                          },
                          "pf_custom_config": {
                            "type": "string"
                          },
                          "gateway": {
                            "type": "string"
                          },
                          "gateway_ipv6": {
                            "type": "string"
                          },
                          "static_routes": {
                            "type": "string"
                          },
                          "management_ip": {
                            "type": "string"
                          },
                          "internet_ip": {
                            "type": "string",
                            "description": "IP used by jails to contact internet"
                          },
                          "backends_outgoing_ip": {
                            "type": "string",
                            "description": "IP used for masquerading backends packets"
                          },
                          "logom_outgoing_op": {
                            "type": "string",
                            "description": "IP used for masquerading log forwarders packets"
                          },
                          "scanner_ip": {
                            "type": "integer",
                            "description": "ObjectId of the Network Address"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/node/{object_id}/": {
      "parameters": [
        {
          "in": "path",
          "name": "object_id",
          "required": true,
          "description": "ID of the node",
          "schema": {
            "type": "integer",
            "minimum": 1
          }
        }
      ],
      "get": {
        "tags": [
          "Node"
        ],
        "summary": "Get one node",
        "responses": {
          "200": {
            "description": "Node object",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Node name"
                    },
                    "pf_limit_states": {
                      "type": "integer"
                    },
                    "pf_limit_frags": {
                      "type": "integer"
                    },
                    "pf_limit_src": {
                      "type": "integer"
                    },
                    "pf_custom_config": {
                      "type": "string"
                    },
                    "gateway": {
                      "type": "string"
                    },
                    "gateway_ipv6": {
                      "type": "string"
                    },
                    "static_routes": {
                      "type": "string"
                    },
                    "management_ip": {
                      "type": "string"
                    },
                    "internet_ip": {
                      "type": "string",
                      "description": "IP used by jails to contact internet"
                    },
                    "backends_outgoing_ip": {
                      "type": "string",
                      "description": "IP used for masquerading backends packets"
                    },
                    "logom_outgoing_op": {
                      "type": "string",
                      "description": "IP used for masquerading log forwarders packets"
                    },
                    "scanner_ip": {
                      "type": "integer",
                      "description": "ObjectId of the Network Address"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Node"
        ],
        "summary": "Update a node",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "node": {
                    "type": "integer",
                    "description": "Object Id of the node to update"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "42"
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "get": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "GET"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "put": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "delete": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        }
                      },
                      "required": [
                        "get",
                        "put",
                        "delete"
                      ]
                    }
                  },
                  "required": [
                    "links",
                    "id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Node"
        ],
        "summary": "Update a node",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "node": {
                    "type": "integer",
                    "description": "Object Id of the node to update"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "42"
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "get": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "GET"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "put": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "delete": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        }
                      },
                      "required": [
                        "get",
                        "put",
                        "delete"
                      ]
                    }
                  },
                  "required": [
                    "links",
                    "id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Node"
        ],
        "summary": "Update a node",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "node": {
                    "type": "integer",
                    "description": "Object Id of the node to update"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "42"
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "get": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "GET"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "put": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "delete": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        }
                      },
                      "required": [
                        "get",
                        "put",
                        "delete"
                      ]
                    }
                  },
                  "required": [
                    "links",
                    "id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/cluster/": {
      "get": {
        "tags": [
          "Cluster"
        ],
        "summary": "Cluster list",
        "responses": {
          "200": {
            "description": "Cluster information",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Cluster name"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/netif/": {
      "get": {
        "tags": [
          "NetworkAddressCards"
        ],
        "summary": "List of all available network address cards",
        "responses": {
          "200": {
            "description": "List of all network address cards",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "dev": {
                            "type": "string"
                          },
                          "node": {
                            "type": "integer",
                            "description": "ObjectId of the node"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/netif/refresh/": {
      "post": {
        "tags": [
          "NetworkAddressCards"
        ],
        "summary": "Refresh list of network cards",
        "responses": {
          "200": {
            "description": "Refresh started",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/netaddr/": {
      "get": {
        "tags": [
          "NetworkAddress"
        ],
        "summary": "List of all network address",
        "responses": {
          "200": {
            "description": "List of all network address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Friendly name"
                          },
                          "nic": {
                            "type": "integer",
                            "description": "Object Id of the Network Card"
                          },
                          "ip": {
                            "type": "string"
                          },
                          "prefix_or_netmask": {
                            "type": "string"
                          },
                          "is_system": {
                            "type": "boolean"
                          },
                          "carp_vhid": {
                            "type": "integer"
                          },
                          "vlan": {
                            "type": "integer"
                          },
                          "vlandev": {
                            "type": "integer",
                            "description": "Object Id of the Network Card"
                          },
                          "fib": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/netaddr/{object_id}/": {
      "get": {
        "tags": [
          "NetworkAddress"
        ],
        "summary": "Get one network address",
        "parameters": [
          {
            "in": "path",
            "name": "object_id",
            "description": "ID of the network address",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all network addresses",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Friendly name"
                    },
                    "nic": {
                      "type": "integer",
                      "description": "Object Id of the Network Card"
                    },
                    "ip": {
                      "type": "string"
                    },
                    "prefix_or_netmask": {
                      "type": "string"
                    },
                    "is_system": {
                      "type": "boolean"
                    },
                    "carp_vhid": {
                      "type": "integer"
                    },
                    "vlan": {
                      "type": "integer"
                    },
                    "vlandev": {
                      "type": "integer",
                      "description": "Object Id of the Network Card"
                    },
                    "fib": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/pki/get_ca": {
      "get": {
        "tags": [
          "PKI"
        ],
        "summary": "Get CA certificate",
        "responses": {
          "200": {
            "description": "CA Certificate",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "seria": {
                      "type": "number"
                    },
                    "status": {
                      "type": "string"
                    },
                    "cert": {
                      "type": "string"
                    },
                    "key": {
                      "type": "string"
                    },
                    "chain": {
                      "type": "string"
                    },
                    "csr": {
                      "type": "string"
                    },
                    "crl": {
                      "type": "string"
                    },
                    "is_ca": {
                      "type": "boolean"
                    },
                    "is_vulture_ca": {
                      "type": "boolean"
                    },
                    "is_external": {
                      "type": "boolean"
                    },
                    "rev_date": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/pki/get_cert": {
      "get": {
        "tags": [
          "PKI"
        ],
        "summary": "Get certificate",
        "responses": {
          "200": {
            "description": "Certificate",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "seria": {
                      "type": "number"
                    },
                    "status": {
                      "type": "string"
                    },
                    "cert": {
                      "type": "string"
                    },
                    "key": {
                      "type": "string"
                    },
                    "chain": {
                      "type": "string"
                    },
                    "csr": {
                      "type": "string"
                    },
                    "crl": {
                      "type": "string"
                    },
                    "is_ca": {
                      "type": "boolean"
                    },
                    "is_vulture_ca": {
                      "type": "boolean"
                    },
                    "is_external": {
                      "type": "boolean"
                    },
                    "rev_date": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/tenants": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "Multi tenants",
        "responses": {
          "200": {
            "description": "List of tenants",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "predator_api_key": {
                        "type": "string"
                      },
                      "shodan_apikey": {
                        "type": "string"
                      },
                      "chameleon_apikey": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tenant"
        ],
        "summary": "Create a tenant",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "predator_api_key": {
                    "type": "string"
                  },
                  "shodan_apikey": {
                    "type": "string"
                  },
                  "chameleon_apikey": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "42"
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "get": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "GET"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "put": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "delete": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        }
                      },
                      "required": [
                        "get",
                        "put",
                        "delete"
                      ]
                    }
                  },
                  "required": [
                    "links",
                    "id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/tenants/{object_id}": {
      "get": {
        "tags": [
          "Tenant"
        ],
        "summary": "Multi tenants",
        "parameters": [
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "description": "ID of the tenant",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant object",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "predator_api_key": {
                      "type": "string"
                    },
                    "shodan_apikey": {
                      "type": "string"
                    },
                    "chameleon_apikey": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tenant"
        ],
        "summary": "Update a tenant",
        "parameters": [
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "description": "ID of the tenant",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "predator_api_key": {
                    "type": "string"
                  },
                  "shodan_apikey": {
                    "type": "string"
                  },
                  "chameleon_apikey": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "42"
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "get": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "GET"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "put": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "delete": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        }
                      },
                      "required": [
                        "get",
                        "put",
                        "delete"
                      ]
                    }
                  },
                  "required": [
                    "links",
                    "id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tenant"
        ],
        "summary": "Delete a tenant",
        "parameters": [
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "description": "ID of the tenant",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The command succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "boolean",
                      "enum": [
                        true,
                        false
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/vm/": {
      "get": {
        "tags": [
          "VirtualMachine"
        ],
        "summary": "Virtual Machines",
        "responses": {
          "200": {
            "description": "List of Virtual Machines",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "node": {
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Node name"
                          },
                          "pf_limit_states": {
                            "type": "integer"
                          },
                          "pf_limit_frags": {
                            "type": "integer"
                          },
                          "pf_limit_src": {
                            "type": "integer"
                          },
                          "pf_custom_config": {
                            "type": "string"
                          },
                          "gateway": {
                            "type": "string"
                          },
                          "gateway_ipv6": {
                            "type": "string"
                          },
                          "static_routes": {
                            "type": "string"
                          },
                          "management_ip": {
                            "type": "string"
                          },
                          "internet_ip": {
                            "type": "string",
                            "description": "IP used by jails to contact internet"
                          },
                          "backends_outgoing_ip": {
                            "type": "string",
                            "description": "IP used for masquerading backends packets"
                          },
                          "logom_outgoing_op": {
                            "type": "string",
                            "description": "IP used for masquerading log forwarders packets"
                          },
                          "scanner_ip": {
                            "type": "integer",
                            "description": "ObjectId of the Network Address"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      },
                      "datastore": {
                        "type": "string"
                      },
                      "loader": {
                        "type": "string"
                      },
                      "cpu": {
                        "type": "string"
                      },
                      "ram": {
                        "type": "string"
                      },
                      "vnc": {
                        "type": "string"
                      },
                      "autostart": {
                        "type": "string"
                      },
                      "status": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/vm/{object_id}": {
      "get": {
        "tags": [
          "VirtualMachine"
        ],
        "summary": "Virtual Machine",
        "parameters": [
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "description": "ID of the virtual machine",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Virtual Machine",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "node": {
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Node name"
                        },
                        "pf_limit_states": {
                          "type": "integer"
                        },
                        "pf_limit_frags": {
                          "type": "integer"
                        },
                        "pf_limit_src": {
                          "type": "integer"
                        },
                        "pf_custom_config": {
                          "type": "string"
                        },
                        "gateway": {
                          "type": "string"
                        },
                        "gateway_ipv6": {
                          "type": "string"
                        },
                        "static_routes": {
                          "type": "string"
                        },
                        "management_ip": {
                          "type": "string"
                        },
                        "internet_ip": {
                          "type": "string",
                          "description": "IP used by jails to contact internet"
                        },
                        "backends_outgoing_ip": {
                          "type": "string",
                          "description": "IP used for masquerading backends packets"
                        },
                        "logom_outgoing_op": {
                          "type": "string",
                          "description": "IP used for masquerading log forwarders packets"
                        },
                        "scanner_ip": {
                          "type": "integer",
                          "description": "ObjectId of the Network Address"
                        }
                      }
                    },
                    "name": {
                      "type": "string"
                    },
                    "datastore": {
                      "type": "string"
                    },
                    "loader": {
                      "type": "string"
                    },
                    "cpu": {
                      "type": "string"
                    },
                    "ram": {
                      "type": "string"
                    },
                    "vnc": {
                      "type": "string"
                    },
                    "autostart": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/zfs/": {
      "get": {
        "tags": [
          "ZFS"
        ],
        "summary": "ZFS list",
        "responses": {
          "200": {
            "description": "List of ZFS",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "node": {
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Node name"
                          },
                          "pf_limit_states": {
                            "type": "integer"
                          },
                          "pf_limit_frags": {
                            "type": "integer"
                          },
                          "pf_limit_src": {
                            "type": "integer"
                          },
                          "pf_custom_config": {
                            "type": "string"
                          },
                          "gateway": {
                            "type": "string"
                          },
                          "gateway_ipv6": {
                            "type": "string"
                          },
                          "static_routes": {
                            "type": "string"
                          },
                          "management_ip": {
                            "type": "string"
                          },
                          "internet_ip": {
                            "type": "string",
                            "description": "IP used by jails to contact internet"
                          },
                          "backends_outgoing_ip": {
                            "type": "string",
                            "description": "IP used for masquerading backends packets"
                          },
                          "logom_outgoing_op": {
                            "type": "string",
                            "description": "IP used for masquerading log forwarders packets"
                          },
                          "scanner_ip": {
                            "type": "integer",
                            "description": "ObjectId of the Network Address"
                          }
                        }
                      },
                      "name": {
                        "type": "string"
                      },
                      "used": {
                        "type": "string"
                      },
                      "avail": {
                        "type": "string"
                      },
                      "refer": {
                        "type": "string"
                      },
                      "mount": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/zfs/{object_id}": {
      "get": {
        "tags": [
          "ZFS"
        ],
        "summary": "ZFS",
        "parameters": [
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "description": "ID of the zfs",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ZFS",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "node": {
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Node name"
                        },
                        "pf_limit_states": {
                          "type": "integer"
                        },
                        "pf_limit_frags": {
                          "type": "integer"
                        },
                        "pf_limit_src": {
                          "type": "integer"
                        },
                        "pf_custom_config": {
                          "type": "string"
                        },
                        "gateway": {
                          "type": "string"
                        },
                        "gateway_ipv6": {
                          "type": "string"
                        },
                        "static_routes": {
                          "type": "string"
                        },
                        "management_ip": {
                          "type": "string"
                        },
                        "internet_ip": {
                          "type": "string",
                          "description": "IP used by jails to contact internet"
                        },
                        "backends_outgoing_ip": {
                          "type": "string",
                          "description": "IP used for masquerading backends packets"
                        },
                        "logom_outgoing_op": {
                          "type": "string",
                          "description": "IP used for masquerading log forwarders packets"
                        },
                        "scanner_ip": {
                          "type": "integer",
                          "description": "ObjectId of the Network Address"
                        }
                      }
                    },
                    "name": {
                      "type": "string"
                    },
                    "used": {
                      "type": "string"
                    },
                    "avail": {
                      "type": "string"
                    },
                    "refer": {
                      "type": "string"
                    },
                    "mount": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/system/zfs/{object_id}/{action}": {
      "post": {
        "tags": [
          "ZFS"
        ],
        "summary": "Create ZFS",
        "parameters": [
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "description": "ID of the zfs",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "in": "path",
            "name": "action",
            "required": true,
            "description": "Action to execute",
            "schema": {
              "type": "string",
              "enum": [
                "snapshot",
                "restore",
                "refresh"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "42"
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "get": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "GET"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "put": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "delete": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        }
                      },
                      "required": [
                        "get",
                        "put",
                        "delete"
                      ]
                    }
                  },
                  "required": [
                    "links",
                    "id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workflow/": {
      "get": {
        "tags": [
          "Workflow"
        ],
        "summary": "List of Workflow",
        "responses": {
          "200": {
            "description": "List of Workflow",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "enabled": {
                        "type": "boolean"
                      },
                      "frontend": {
                        "type": "integer",
                        "description": "ID of the frontend"
                      },
                      "backend": {
                        "type": "integer",
                        "description": "ID of the backend"
                      },
                      "fqdn": {
                        "type": "string",
                        "description": "FQDN. Only if the frontend is in HTTP Mode"
                      },
                      "public_dir": {
                        "type": "string",
                        "description": "Public Directory. Only if the frontend is in HTTP Mode"
                      },
                      "authentication": {
                        "type": "integer",
                        "description": "ID of the authentication portal"
                      },
                      "defender_policy": {
                        "type": "integer",
                        "description": "ID of the Defender Policy"
                      },
                      "acl_frontend": {
                        "description": "ACL before Defender Policy",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "ID of the Access Control"
                            },
                            "action_satisfy": {
                              "type": "integer",
                              "description": "Action to execute if the ACL satisfy",
                              "enum": [
                                200,
                                403,
                                301,
                                302
                              ]
                            },
                            "action_not_satisfy": {
                              "type": "integer",
                              "description": "Action to execute if the ACL don't satisfy",
                              "enum": [
                                200,
                                403,
                                301,
                                302
                              ]
                            },
                            "redirect_url_satisfy": {
                              "type": "string",
                              "description": "URL to redirect to if action_satisfy in (301, 302)"
                            },
                            "redirect_url_not_satisfy": {
                              "type": "string",
                              "description": "URL to redirect to if action_not_satisfy in (301, 302)"
                            }
                          }
                        }
                      },
                      "acl_backend": {
                        "description": "ACL after Defender Policy",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "ID of the Access Control"
                            },
                            "action_satisfy": {
                              "type": "integer",
                              "description": "Action to execute if the ACL satisfy",
                              "enum": [
                                200,
                                403,
                                301,
                                302
                              ]
                            },
                            "action_not_satisfy": {
                              "type": "integer",
                              "description": "Action to execute if the ACL don't satisfy",
                              "enum": [
                                200,
                                403,
                                301,
                                302
                              ]
                            },
                            "redirect_url_satisfy": {
                              "type": "string",
                              "description": "URL to redirect to if action_satisfy in (301, 302)"
                            },
                            "redirect_url_not_satisfy": {
                              "type": "string",
                              "description": "URL to redirect to if action_not_satisfy in (301, 302)"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Workflow"
        ],
        "summary": "Create a workflow",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "frontend": {
                    "type": "integer",
                    "description": "ID of the frontend"
                  },
                  "backend": {
                    "type": "integer",
                    "description": "ID of the backend"
                  },
                  "fqdn": {
                    "type": "string",
                    "description": "FQDN. Only if the frontend is in HTTP Mode"
                  },
                  "public_dir": {
                    "type": "string",
                    "description": "Public Directory. Only if the frontend is in HTTP Mode"
                  },
                  "authentication": {
                    "type": "integer",
                    "description": "ID of the authentication portal"
                  },
                  "defender_policy": {
                    "type": "integer",
                    "description": "ID of the Defender Policy"
                  },
                  "acl_frontend": {
                    "description": "ACL before Defender Policy",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "ID of the Access Control"
                        },
                        "action_satisfy": {
                          "type": "integer",
                          "description": "Action to execute if the ACL satisfy",
                          "enum": [
                            200,
                            403,
                            301,
                            302
                          ]
                        },
                        "action_not_satisfy": {
                          "type": "integer",
                          "description": "Action to execute if the ACL don't satisfy",
                          "enum": [
                            200,
                            403,
                            301,
                            302
                          ]
                        },
                        "redirect_url_satisfy": {
                          "type": "string",
                          "description": "URL to redirect to if action_satisfy in (301, 302)"
                        },
                        "redirect_url_not_satisfy": {
                          "type": "string",
                          "description": "URL to redirect to if action_not_satisfy in (301, 302)"
                        }
                      }
                    }
                  },
                  "acl_backend": {
                    "description": "ACL after Defender Policy",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "ID of the Access Control"
                        },
                        "action_satisfy": {
                          "type": "integer",
                          "description": "Action to execute if the ACL satisfy",
                          "enum": [
                            200,
                            403,
                            301,
                            302
                          ]
                        },
                        "action_not_satisfy": {
                          "type": "integer",
                          "description": "Action to execute if the ACL don't satisfy",
                          "enum": [
                            200,
                            403,
                            301,
                            302
                          ]
                        },
                        "redirect_url_satisfy": {
                          "type": "string",
                          "description": "URL to redirect to if action_satisfy in (301, 302)"
                        },
                        "redirect_url_not_satisfy": {
                          "type": "string",
                          "description": "URL to redirect to if action_not_satisfy in (301, 302)"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "42"
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "get": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "GET"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "put": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "delete": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        }
                      },
                      "required": [
                        "get",
                        "put",
                        "delete"
                      ]
                    }
                  },
                  "required": [
                    "links",
                    "id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/workflow/{object_id}": {
      "get": {
        "tags": [
          "Workflow"
        ],
        "summary": "Get a workflow configuration",
        "parameters": [
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "description": "ID of the worfklow",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow object",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "enabled": {
                      "type": "boolean"
                    },
                    "frontend": {
                      "type": "integer",
                      "description": "ID of the frontend"
                    },
                    "backend": {
                      "type": "integer",
                      "description": "ID of the backend"
                    },
                    "fqdn": {
                      "type": "string",
                      "description": "FQDN. Only if the frontend is in HTTP Mode"
                    },
                    "public_dir": {
                      "type": "string",
                      "description": "Public Directory. Only if the frontend is in HTTP Mode"
                    },
                    "authentication": {
                      "type": "integer",
                      "description": "ID of the authentication portal"
                    },
                    "defender_policy": {
                      "type": "integer",
                      "description": "ID of the Defender Policy"
                    },
                    "acl_frontend": {
                      "description": "ACL before Defender Policy",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "ID of the Access Control"
                          },
                          "action_satisfy": {
                            "type": "integer",
                            "description": "Action to execute if the ACL satisfy",
                            "enum": [
                              200,
                              403,
                              301,
                              302
                            ]
                          },
                          "action_not_satisfy": {
                            "type": "integer",
                            "description": "Action to execute if the ACL don't satisfy",
                            "enum": [
                              200,
                              403,
                              301,
                              302
                            ]
                          },
                          "redirect_url_satisfy": {
                            "type": "string",
                            "description": "URL to redirect to if action_satisfy in (301, 302)"
                          },
                          "redirect_url_not_satisfy": {
                            "type": "string",
                            "description": "URL to redirect to if action_not_satisfy in (301, 302)"
                          }
                        }
                      }
                    },
                    "acl_backend": {
                      "description": "ACL after Defender Policy",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "ID of the Access Control"
                          },
                          "action_satisfy": {
                            "type": "integer",
                            "description": "Action to execute if the ACL satisfy",
                            "enum": [
                              200,
                              403,
                              301,
                              302
                            ]
                          },
                          "action_not_satisfy": {
                            "type": "integer",
                            "description": "Action to execute if the ACL don't satisfy",
                            "enum": [
                              200,
                              403,
                              301,
                              302
                            ]
                          },
                          "redirect_url_satisfy": {
                            "type": "string",
                            "description": "URL to redirect to if action_satisfy in (301, 302)"
                          },
                          "redirect_url_not_satisfy": {
                            "type": "string",
                            "description": "URL to redirect to if action_not_satisfy in (301, 302)"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Object not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Workflow"
        ],
        "summary": "Edit a workflow",
        "parameters": [
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "description": "ID of the workflow",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "frontend": {
                    "type": "integer",
                    "description": "ID of the frontend"
                  },
                  "backend": {
                    "type": "integer",
                    "description": "ID of the backend"
                  },
                  "fqdn": {
                    "type": "string",
                    "description": "FQDN. Only if the frontend is in HTTP Mode"
                  },
                  "public_dir": {
                    "type": "string",
                    "description": "Public Directory. Only if the frontend is in HTTP Mode"
                  },
                  "authentication": {
                    "type": "integer",
                    "description": "ID of the authentication portal"
                  },
                  "defender_policy": {
                    "type": "integer",
                    "description": "ID of the Defender Policy"
                  },
                  "acl_frontend": {
                    "description": "ACL before Defender Policy",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "ID of the Access Control"
                        },
                        "action_satisfy": {
                          "type": "integer",
                          "description": "Action to execute if the ACL satisfy",
                          "enum": [
                            200,
                            403,
                            301,
                            302
                          ]
                        },
                        "action_not_satisfy": {
                          "type": "integer",
                          "description": "Action to execute if the ACL don't satisfy",
                          "enum": [
                            200,
                            403,
                            301,
                            302
                          ]
                        },
                        "redirect_url_satisfy": {
                          "type": "string",
                          "description": "URL to redirect to if action_satisfy in (301, 302)"
                        },
                        "redirect_url_not_satisfy": {
                          "type": "string",
                          "description": "URL to redirect to if action_not_satisfy in (301, 302)"
                        }
                      }
                    }
                  },
                  "acl_backend": {
                    "description": "ACL after Defender Policy",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "ID of the Access Control"
                        },
                        "action_satisfy": {
                          "type": "integer",
                          "description": "Action to execute if the ACL satisfy",
                          "enum": [
                            200,
                            403,
                            301,
                            302
                          ]
                        },
                        "action_not_satisfy": {
                          "type": "integer",
                          "description": "Action to execute if the ACL don't satisfy",
                          "enum": [
                            200,
                            403,
                            301,
                            302
                          ]
                        },
                        "redirect_url_satisfy": {
                          "type": "string",
                          "description": "URL to redirect to if action_satisfy in (301, 302)"
                        },
                        "redirect_url_not_satisfy": {
                          "type": "string",
                          "description": "URL to redirect to if action_not_satisfy in (301, 302)"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Object created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "42"
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "get": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "GET"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "put": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        },
                        "delete": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "enum": [
                                "self"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "PUT"
                              ]
                            },
                            "href": {
                              "type": "string",
                              "example": "/api/path/object_id"
                            }
                          },
                          "required": [
                            "rel",
                            "type",
                            "href"
                          ]
                        }
                      },
                      "required": [
                        "get",
                        "put",
                        "delete"
                      ]
                    }
                  },
                  "required": [
                    "links",
                    "id"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Workflow"
        ],
        "summary": "Delete a workflow",
        "parameters": [
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "description": "ID of the workflow",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The command succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "boolean",
                      "enum": [
                        true,
                        false
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/authentication/idp/{object_id}": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "List Groups/Users or Search Users",
        "parameters": [
          {
            "in": "path",
            "name": "object_id",
            "description": "ID of the Portal",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "users",
                "groups",
                "search"
              ]
            }
          },
          {
            "in": "query",
            "name": "group_name",
            "description": "Groupe name to query. Required only if object_type is 'users'",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "search",
            "description": "Search string: Required only if object_type is search",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of groups or users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/authentication/idp/users/{object_id}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Create an user",
        "parameters": [
          {
            "in": "path",
            "name": "object_id",
            "description": "ID of the Portal",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "User name",
                    "required": true
                  },
                  "email": {
                    "type": "string",
                    "description": "User email",
                    "required": true
                  },
                  "mobile": {
                    "type": "string",
                    "description": "User phone number",
                    "required": false
                  },
                  "group": {
                    "type": "string",
                    "description": "User group",
                    "required": true
                  },
                  "userPassword": {
                    "type": "string",
                    "description": "User password",
                    "required": false
                  },
                  "smartcardid": {
                    "type": "string",
                    "description": "User smart card ID",
                    "required": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The command succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "boolean",
                      "enum": [
                        true,
                        false
                      ]
                    },
                    "user_id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Authentication"
        ],
        "summary": "Edit an user",
        "parameters": [
          {
            "in": "path",
            "name": "object_id",
            "description": "ID of the Portal",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "User ID (will be used to find the user to edit)",
                    "required": true
                  },
                  "username": {
                    "type": "string",
                    "description": "User Name",
                    "required": true
                  },
                  "email": {
                    "type": "string",
                    "description": "User email",
                    "required": true
                  },
                  "mobile": {
                    "type": "string",
                    "description": "User phone number",
                    "required": false
                  },
                  "group": {
                    "type": "string",
                    "description": "User group",
                    "required": true
                  },
                  "userPassword": {
                    "type": "string",
                    "description": "User password",
                    "required": false
                  },
                  "smartcardid": {
                    "type": "string",
                    "description": "User smart card ID",
                    "required": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The command succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "boolean",
                      "enum": [
                        true,
                        false
                      ]
                    },
                    "user_id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Authentication"
        ],
        "summary": "Delete an user",
        "parameters": [
          {
            "in": "path",
            "name": "object_id",
            "description": "ID of the portal",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "string",
                    "description": "User ID to delete"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The command succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "boolean",
                      "enum": [
                        true,
                        false
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "An error occured while launching a query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "The description of the error(s)"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/authentication/idp/groups/{object_id}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Create a group",
        "parameters": [
          {
            "in": "path",
            "name": "object_id",
            "description": "ID of the Portal",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "group_name": {
                    "type": "string",
                    "description": "Group Name",
                    "required": true
                  },
                  "member": {
                    "description": "Members",
                    "required": true,
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components":{"schemas":{}}
}
